#!/usr/bin/env node

const chalk = require('chalk')
const fs = require('fs')
const program = require('commander')
const { join } = require('path')

const {
  buildHtml,
  buildScripts,
  buildStyles,
  copyImages,
} = require('./tasks')

const {
  createFolder,
  remove,
} = require('./utils')

const DEFAULT_OUTPUT_DIR = './'
const DEFAULT_SOURCE_DIR = './_src'

const ASSETS_DIR = 'assets'
const IMAGES_DIR = 'images'
const SCRIPTS_DIR = 'scripts'
const STYLES_DIR = 'styles'

const ENTRY_FILE = 'app'

program
  .option(
    '-s, --source_dir <path>',
    `path to source folder, defaults to "${DEFAULT_SOURCE_DIR}"`,
    DEFAULT_SOURCE_DIR
  )
  .option(
    '-o, --output_dir <path>',
    `output folder path, defaults to "${DEFAULT_OUTPUT_DIR}"`,
    DEFAULT_OUTPUT_DIR
  )
  .parse(process.argv)

const outDir = program.output_dir
const srcDir = program.source_dir

console.log(chalk.bold('generate static page'))
console.log(`output_dir=${chalk.blue(outDir)}`)
console.log(`source_dir=${chalk.blue(srcDir)}`)

if (!fs.existsSync(srcDir)) {
  console.error(chalk.red('Error: could not find source folder.'))
  process.exit(1)
}

const outAssetsDir = join(outDir, ASSETS_DIR)
const srcAssetsDir = join(srcDir, ASSETS_DIR)

if (!fs.existsSync(srcAssetsDir)) {
  console.error(chalk.red('Error: source needs an assets folder.'))
  process.exit(1)
}

Promise.resolve()
  .then(() => {
    // Remove assets folder
    return remove(outAssetsDir)
  })
  .then(() => {
    // Create a new assets folder
    return createFolder(outAssetsDir)
  })
  .then(() => {
    // Create sub-folders for assets
    const outAssetsStylesDir = join(outAssetsDir, STYLES_DIR)
    const outAssetsScriptsDir = join(outAssetsDir, SCRIPTS_DIR)
    const outAssetsImagesDir = join(outAssetsDir, IMAGES_DIR)

    return Promise.all([
      createFolder(outAssetsStylesDir),
      createFolder(outAssetsScriptsDir),
      createFolder(outAssetsImagesDir),
    ])
  })
  .then(() => {
    // Convert and minify styles
    const srcStylesFile = join(srcAssetsDir, STYLES_DIR, `${ENTRY_FILE}.scss`)
    const outStylesFile = join(outAssetsDir, STYLES_DIR, `${ENTRY_FILE}.css`)

    return buildStyles(srcStylesFile, outStylesFile)
  })
  .then(() => {
    // Bundle, compile and minify scripts
    const srcScriptsFile = join(srcAssetsDir, SCRIPTS_DIR, `${ENTRY_FILE}.js`)
    const outScriptsFile = join(outAssetsDir, SCRIPTS_DIR, `${ENTRY_FILE}.js`)

    return buildScripts(srcScriptsFile, outScriptsFile)
  })
  .then(() => {
    // Copy images
    return copyImages(srcDir, outDir)
  })
  .then(() => {
    // Generate and minify html views
    return buildHtml(srcDir, outDir)
  })
  .then(() => {
    console.log('')
    console.log(chalk.blue('( ͡° ͜ʖ ͡°) done!'))
  })
  .catch(err => {
    console.log('')
    console.error(chalk.red(err))
    console.log('')
    console.error(chalk.red('An error occurred!'))
    process.exit(1)
  })
