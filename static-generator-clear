#!/usr/bin/env node

const chalk = require('chalk')
const program = require('commander')
const { existsSync } = require('fs')
const { join } = require('path')

const {
  getAllFolders,
  remove,
} = require('./utils')

const DEFAULT_OUTPUT_DIR = './'
const DEFAULT_SOURCE_DIR = './_src'

const ASSETS_DIR = 'assets'
const VIEWS_DIR = 'views'

program
  .option(
    '-s, --source_dir <path>',
    `path to source folder, defaults to "${DEFAULT_SOURCE_DIR}"`,
    DEFAULT_SOURCE_DIR
  )
  .option(
    '-o, --output_dir <path>',
    `output folder path, defaults to "${DEFAULT_OUTPUT_DIR}"`,
    DEFAULT_OUTPUT_DIR
  )
  .parse(process.argv)

const outDir = join(__dirname, program.output_dir)
const srcDir = join(__dirname, program.source_dir)

console.log(chalk.bold('clear generated files'))
console.log(`output_dir=${chalk.blue(outDir)}`)
console.log(`source_dir=${chalk.blue(srcDir)}`)
console.log('')

if (!existsSync(srcDir)) {
  console.error(chalk.red('Error: could not find source folder.'))
  process.exit(1)
}

if (!existsSync(outDir)) {
  console.error(chalk.red('Error: could not find output folder.'))
  process.exit(1)
}

const outAssetsDir = join(outDir, ASSETS_DIR)

Promise.resolve()
  .then(() => {
    // Remove assets folder
    console.log(chalk.bold('✓ delete assets folder'))
    return remove(outAssetsDir)
  })
  .then(() => {
    // Remove sub view folders
    const viewSlugs = getAllFolders(join(srcDir, VIEWS_DIR)).map(views => {
      const splitted = views.split('/')
      return splitted[splitted.length - 1]
    })

    return Promise.all(
      viewSlugs.map(slug => {
        return new Promise((resolve, reject) => {
          console.log('')
          console.log(chalk.bold(`✓ delete "${slug}" view folder`))

          remove(join(outDir, slug))
            .then(() => {
              resolve()
            })
            .catch(err => {
              reject(err)
            })
        })
      })
    )
  })
  .then(() => {
    // Remove root html file
    console.log('')
    console.log(chalk.bold('✓ delete index.html root file'))
    return remove(join(outDir, 'index.html'))
  })
  .then(() => {
    console.log('')
    console.log(chalk.blue('( ͡° ͜ʖ ͡°) done!'))
  })
  .catch((err) => {
    console.log('')
    console.error(chalk.red(err))
    console.log('')
    console.error(chalk.red('An error occurred!'))
    process.exit(1)
  })
